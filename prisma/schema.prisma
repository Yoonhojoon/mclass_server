// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String?
  name               String?
  role               UserRole  @default(USER)
  isAdmin            Boolean   @default(false)
  provider           Provider  @default(LOCAL)
  socialId           String?
  isSignUpCompleted  Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([provider, socialId])

  // Relations
  mclasses           MClass[]
  enrollments        Enrollment[]
  userTermAgreements UserTermAgreement[]

  @@map("users")
}

model MClass {
  id               String        @id @default(uuid())
  title            String
  description      String?
  // 모집/행사
  recruitStartAt   DateTime?     // 모집 시작
  recruitEndAt     DateTime?     // 모집 마감
  startAt          DateTime      // 행사 시작
  endAt            DateTime      // 행사 종료
  // 선발 관련
  selectionType    SelectionType @default(FIRST_COME)
  capacity         Int?          // null이면 무제한
  approvedCount    Int           @default(0) // 승인된 인원 카운터
  allowWaitlist    Boolean       @default(false)
  waitlistCapacity Int?
  // 표시/장소/비용
  visibility       Visibility    @default(PUBLIC)
  isOnline         Boolean       @default(true)
  location         String?
  fee              Int?          // 무료면 0 또는 null

  createdBy        String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  creator          User          @relation(fields: [createdBy], references: [id], onDelete: Restrict)
  enrollments      Enrollment[]

  @@index([visibility, recruitStartAt, recruitEndAt])
  @@index([startAt])
  @@map("mclasses")
}

model Term {
  id          String   @id @default(uuid())
  type        TermType
  title       String
  content     String
  isRequired  Boolean  @default(false) @map("isRequired")
  version     String
  createdAt   DateTime @default(now()) @map("createdAt")

  // Relations
  userTermAgreements UserTermAgreement[]

  @@map("terms")
}

model UserTermAgreement {
  id         String   @id @default(uuid())
  userId     String
  termId     String
  agreedAt   DateTime @default(now())

  // Relations
  user       User @relation(fields: [userId], references: [id])
  term       Term @relation(fields: [termId], references: [id])

  @@unique([userId, termId])
  @@map("user_term_agreements")
}

model Enrollment {
  id         String            @id @default(uuid())
  userId     String
  mclassId   String
  status     EnrollmentStatus  @default(APPLIED) // APPLIED/APPROVED/REJECTED/WAITLISTED/CANCELED
  appliedAt  DateTime          @default(now())
  decidedAt  DateTime?
  canceledAt DateTime?
  reason     String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relations
  user       User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  mclass     MClass @relation(fields: [mclassId], references: [id], onDelete: Cascade)
  form       EnrollmentForm?

  @@unique([userId, mclassId])
  @@index([mclassId, status])
  @@index([userId])
  @@map("enrollments")
}

model EnrollmentForm {
  id             String     @id @default(uuid())
  enrollmentId   String     @unique
  phone          String?
  birthDate      DateTime?
  gender         Gender?
  isStudent      Boolean    @default(false)
  schoolName     String?
  major          String?
  address        String?
  availableTime  String[]   // text[]
  supportReason  String?
  wantedActivity String?
  experience     String?
  introduce      String?
  agreeTerms     Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  enrollment     Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@map("enrollment_forms")
}

enum UserRole {
  USER
  ADMIN
}

enum Provider {
  LOCAL
  KAKAO
  GOOGLE
  NAVER
}

enum TermType {
  SERVICE
  PRIVACY
  ENROLLMENT
}

enum Gender {
  M
  F
}

enum SelectionType { 
  FIRST_COME 
  REVIEW 
}

enum Visibility { 
  PUBLIC 
  UNLISTED 
}

enum EnrollmentStatus { 
  APPLIED 
  APPROVED 
  REJECTED 
  WAITLISTED 
  CANCELED 
}
