generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String?
  name               String?
  role               UserRole            @default(USER)
  isAdmin            Boolean             @default(false)
  provider           Provider            @default(LOCAL)
  socialId           String?
  isSignUpCompleted  Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  enrollments        Enrollment[]
  mclasses           MClass[]
  userTermAgreements UserTermAgreement[]

  @@unique([provider, socialId])
  @@map("users")
}

model MClass {
  id               String          @id @default(uuid())
  title            String
  description      String?
  recruitStartAt   DateTime
  recruitEndAt     DateTime
  startAt          DateTime
  endAt            DateTime
  selectionType    SelectionType   @default(FIRST_COME)
  capacity         Int?
  allowWaitlist    Boolean         @default(false)
  waitlistCapacity Int?
  visibility       Visibility      @default(PUBLIC)
  isOnline         Boolean         @default(true)
  location         String?
  fee              Int?
  createdBy        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  enrollmentForm   EnrollmentForm?
  enrollments      Enrollment[]
  creator          User            @relation(fields: [createdBy], references: [id])

  @@index([visibility, recruitStartAt, recruitEndAt])
  @@index([startAt])
  @@map("mclasses")
}

model Term {
  id                 String              @id @default(uuid())
  type               TermType
  title              String
  content            String
  isRequired         Boolean             @default(false) @map("isRequired")
  version            String
  createdAt          DateTime            @default(now()) @map("createdAt")
  userTermAgreements UserTermAgreement[]

  @@map("terms")
}

model UserTermAgreement {
  id       String   @id @default(uuid())
  userId   String
  termId   String
  agreedAt DateTime @default(now())
  term     Term     @relation(fields: [termId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, termId])
  @@map("user_term_agreements")
}

model Enrollment {
  id               String           @id @default(uuid())
  userId           String
  mclassId         String
  enrollmentFormId String
  answers          Json
  status           EnrollmentStatus @default(APPLIED)
  appliedAt        DateTime         @default(now())
  decidedAt        DateTime?
  canceledAt       DateTime?
  reason           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  enrollmentForm   EnrollmentForm   @relation(fields: [enrollmentFormId], references: [id], onDelete: Cascade)
  mclass           MClass           @relation(fields: [mclassId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id])

  @@unique([userId, mclassId])
  @@index([mclassId, status])
  @@index([userId])
  @@map("enrollments")
}

model EnrollmentForm {
  id          String       @id @default(uuid())
  mclassId    String       @unique
  title       String
  description String?
  questions   Json
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mclass      MClass       @relation(fields: [mclassId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]

  @@map("enrollment_forms")
}

enum UserRole {
  USER
  ADMIN
}

enum Provider {
  LOCAL
  KAKAO
  GOOGLE
  NAVER
}

enum TermType {
  SERVICE
  PRIVACY
  ENROLLMENT
}

enum Gender {
  M
  F
}

enum SelectionType {
  FIRST_COME
  REVIEW
}

enum Visibility {
  PUBLIC
  UNLISTED
}

enum EnrollmentStatus {
  APPLIED
  APPROVED
  REJECTED
  WAITLISTED
  CANCELED
}
