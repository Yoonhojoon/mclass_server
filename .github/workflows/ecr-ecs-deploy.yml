name: ECR + ECS Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: mclass-server
  ECS_CLUSTER: mclass-cluster
  ECS_SERVICE: mclass-service
  ECS_TASK_DEFINITION: mclass-task
  ECS_DESIRED_COUNT: 2
  ECS_LAUNCH_TYPE: FARGATE

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint
    
    - name: Security audit
      run: npm audit --audit-level moderate

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Verify existing infrastructure
      run: |
        echo "✅ Terraform으로 생성된 인프라 확인:"
        echo "📦 ECR Repository: ${{ env.ECR_REPOSITORY }}"
        echo "🏗️  ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "🔗 ECS Service: ${{ env.ECS_SERVICE }}"
        echo "📋 Task Definition: ${{ env.ECS_TASK_DEFINITION }}"
        echo ""
        echo "ℹ️  모든 인프라는 Terraform으로 관리됩니다."
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Create or update task definition
      run: |
        if aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} --query taskDefinition > task-definition.json
        else
          cp task-definition.json task-definition.json.backup
        fi
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: mclass-server
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Register task definition
      run: aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }} --region ${{ env.AWS_REGION }}
    
    - name: Check if ECS service exists
      id: check-service
      run: |
        echo "🔍 ECS 서비스 확인 중..."
        echo "클러스터: ${{ env.ECS_CLUSTER }}"
        echo "서비스: ${{ env.ECS_SERVICE }}"
        echo "리전: ${{ env.AWS_REGION }}"
        
        # AWS CLI 명령어 실행 결과 확인
        echo "=== AWS CLI 명령어 실행 ==="
        aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} || echo "AWS CLI 명령어 실패"
        
        # 더 정확한 확인 방법
        SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null || echo "NONE")
        echo "서비스 상태: $SERVICE_STATUS"
        
        if [ "$SERVICE_STATUS" = "ACTIVE" ] || [ "$SERVICE_STATUS" = "DRAINING" ]; then
          echo "✅ ECS 서비스가 존재합니다: $SERVICE_STATUS"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ECS 서비스가 존재하지 않습니다: $SERVICE_STATUS"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Update existing ECS service
      if: steps.check-service.outputs.exists == 'true'
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }}
    
    - name: Verify ECS service exists
      if: steps.check-service.outputs.exists == 'false'
      run: |
        echo "❌ ECS 서비스가 존재하지 않습니다."
        echo "📝 Terraform을 먼저 실행하여 인프라를 생성하세요:"
        echo "   GitHub Actions → Terraform CI 워크플로우 실행"
        echo ""
        echo "서비스 이름: ${{ env.ECS_SERVICE }}"
        echo "클러스터: ${{ env.ECS_CLUSTER }}"
        echo "Task Definition: ${{ env.ECS_TASK_DEFINITION }}"
        echo ""
        echo "💡 해결 방법:"
        echo "1. GitHub Actions에서 'Terraform CI' 워크플로우 실행"
        echo "2. main 브랜치에 머지 후 자동 실행"
        echo "3. Terraform으로 모든 인프라 생성 후 재시도"
        exit 1

    - name: Wait for service stability
      run: |
        echo "🔍 서비스 안정화 대기 시작..."
        echo "클러스터: ${{ env.ECS_CLUSTER }}"
        echo "서비스: ${{ env.ECS_SERVICE }}"
        echo "리전: ${{ env.AWS_REGION }}"
        echo ""
        
        # 현재 서비스 상태 확인
        echo "📊 현재 서비스 상태:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount,pendingCount:pendingCount,deployments:deployments}' \
          --output table
        
        echo ""
        echo "⏳ 서비스 안정화 대기 중... (최대 15분)"
        
        # 타임아웃 설정과 함께 안정화 대기
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 900 || {
            echo "❌ 서비스 안정화 대기 실패!"
            echo ""
            echo "🔍 문제 진단을 위한 추가 정보:"
            echo "1. 서비스 상태:"
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount,pendingCount:pendingCount}' \
              --output table
            
            echo ""
            echo "2. 최근 이벤트:"
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].events[0:5].{createdAt:createdAt,message:message}' \
              --output table
            
            echo ""
            echo "💡 가능한 원인:"
            echo "- 태스크가 시작되지 않음 (이미지 문제, 리소스 부족)"
            echo "- 헬스체크 실패 (애플리케이션 시작 실패)"
            echo "- 네트워크 설정 문제"
            echo "- 보안 그룹 설정 문제"
            
            exit 1
          }
        
        echo "✅ 서비스 안정화 완료!"

    - name: Deployment Status
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📦 Image: ${{ steps.build-image.outputs.image }}"
        echo "🔗 ECS Service: ${{ env.ECS_SERVICE }}"
        echo "🏗️  Cluster: ${{ env.ECS_CLUSTER }}"
        echo "⏰ Deployment Time: $(date)"

    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi 