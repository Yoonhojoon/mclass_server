name: ECR + ECS Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: mclass-server
  ECS_CLUSTER: mclass-cluster
  ECS_SERVICE: mclass-service
  ECS_TASK_DEFINITION: mclass-task
  ECS_DESIRED_COUNT: 2
  ECS_LAUNCH_TYPE: FARGATE

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

    - name: Create .env.prod
      run: echo "${{ secrets.ENV_PROD }}" > .env

    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint
    
    # - name: Security audit
    #   run: npm audit --audit-level high || echo "⚠️  보안 취약점 발견됨. passport-kakao 패키지 업데이트 대기 중..."

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Debug ENV_PROD contents
      run: |
        echo "🔍 ENV_PROD 내용 디버깅 중..."
        echo "ENV_PROD 길이: ${#ENV_PROD}"
        
        # .env.prod 파일 생성
        echo "${{ secrets.ENV_PROD }}" > .env.prod
        
        echo "📄 .env.prod 파일이 생성되었습니다."
        
        echo "📊 환경변수 개수 확인:"
        grep -c "=" .env.prod || echo "환경변수 없음"
        
        # 민감한 정보가 포함된 .env.prod 파일 삭제
        rm -f .env.prod
        
        echo "✅ 디버깅 완료!"

    - name: Setup Parameter Store secrets
      run: |
        echo "🔐 Parameter Store에 환경변수 설정 중..."
        echo "${{ secrets.ENV_PROD }}" > .env.prod
        
        # 각 환경변수를 추출하여 Parameter Store에 저장
        echo "📦 DATABASE_URL 설정 중..."
        DATABASE_URL_VALUE=$(grep DATABASE_URL .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/database_url" \
          --value "$DATABASE_URL_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "DATABASE_URL 설정 완료"
        
        echo "🔑 JWT_SECRET 설정 중..."
        JWT_SECRET_VALUE=$(grep JWT_SECRET .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/jwt_secret" \
          --value "$JWT_SECRET_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "JWT_SECRET 설정 완료"
        
        echo "🍊 KAKAO_CLIENT_ID 설정 중..."
        KAKAO_CLIENT_ID_VALUE=$(grep KAKAO_CLIENT_ID .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/kakao_client_id" \
          --value "$KAKAO_CLIENT_ID_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "KAKAO_CLIENT_ID 설정 완료"
        
        echo "🍊 KAKAO_CLIENT_SECRET 설정 중..."
        KAKAO_CLIENT_SECRET_VALUE=$(grep KAKAO_CLIENT_SECRET .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/kakao_client_secret" \
          --value "$KAKAO_CLIENT_SECRET_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "KAKAO_CLIENT_SECRET 설정 완료"
        
        echo "🔍 GOOGLE_CLIENT_ID 설정 중..."
        GOOGLE_CLIENT_ID_VALUE=$(grep GOOGLE_CLIENT_ID .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/google_client_id" \
          --value "$GOOGLE_CLIENT_ID_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "GOOGLE_CLIENT_ID 설정 완료"
        
        echo "🔍 GOOGLE_CLIENT_SECRET 설정 중..."
        GOOGLE_CLIENT_SECRET_VALUE=$(grep GOOGLE_CLIENT_SECRET .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/google_client_secret" \
          --value "$GOOGLE_CLIENT_SECRET_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "GOOGLE_CLIENT_SECRET 설정 완료"
        
        echo "🟢 NAVER_CLIENT_ID 설정 중..."
        NAVER_CLIENT_ID_VALUE=$(grep NAVER_CLIENT_ID .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/naver_client_id" \
          --value "$NAVER_CLIENT_ID_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "NAVER_CLIENT_ID 설정 완료"
        
        echo "🟢 NAVER_CLIENT_SECRET 설정 중..."
        NAVER_CLIENT_SECRET_VALUE=$(grep NAVER_CLIENT_SECRET .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/naver_client_secret" \
          --value "$NAVER_CLIENT_SECRET_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "NAVER_CLIENT_SECRET 설정 완료"
        
        echo "👑 INITIAL_ADMIN_EMAIL 설정 중..."
        INITIAL_ADMIN_EMAIL_VALUE=$(grep INITIAL_ADMIN_EMAIL .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/initial_admin_email" \
          --value "$INITIAL_ADMIN_EMAIL_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "INITIAL_ADMIN_EMAIL 설정 완료"
        
        echo "👑 INITIAL_ADMIN_PASSWORD 설정 중..."
        INITIAL_ADMIN_PASSWORD_VALUE=$(grep INITIAL_ADMIN_PASSWORD .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/initial_admin_password" \
          --value "$INITIAL_ADMIN_PASSWORD_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "INITIAL_ADMIN_PASSWORD 설정 완료"
        
        echo "👑 INITIAL_ADMIN_NAME 설정 중..."
        INITIAL_ADMIN_NAME_VALUE=$(grep INITIAL_ADMIN_NAME .env.prod | cut -d '=' -f2-)
        aws ssm put-parameter \
          --name "/mclass/initial_admin_name" \
          --value "$INITIAL_ADMIN_NAME_VALUE" \
          --type "SecureString" \
          --region ${{ env.AWS_REGION }} \
          --overwrite || echo "INITIAL_ADMIN_NAME 설정 완료"
        
        # 민감한 정보가 포함된 .env.prod 파일 삭제
        rm -f .env.prod
        
        echo "✅ Parameter Store 설정 완료"
    
    - name: Verify existing infrastructure
      run: |
        echo "✅ Terraform으로 생성된 인프라 확인:"
        echo "📦 ECR Repository: ${{ env.ECR_REPOSITORY }}"
        echo "🏗️  ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "🔗 ECS Service: ${{ env.ECS_SERVICE }}"
        echo "📋 Task Definition: ${{ env.ECS_TASK_DEFINITION }}"
        echo ""
        echo "ℹ️  모든 인프라는 Terraform으로 관리됩니다."
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Verify image build
      run: |
        echo "🔍 이미지 빌드 검증 중..."
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG=${{ github.sha }}
        
        # 이미지가 제대로 푸시되었는지 확인
        echo "📦 이미지 목록 확인:"
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --region ${{ env.AWS_REGION }} \
          --query 'imageDetails[].{imageTag:imageTags[0],imageDigest:imageDigest,pushedAt:imagePushedAt}' \
          --output table
        
        # 최신 이미지 정보 확인
        echo "✅ 최신 이미지 정보:"
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids imageTag=latest \
          --region ${{ env.AWS_REGION }} \
          --query 'imageDetails[0].{imageTag:imageTags[0],imageDigest:imageDigest,pushedAt:imagePushedAt}' \
          --output table
    
    - name: Create or update task definition
      run: |
        if aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} --query taskDefinition > task-definition.json
        else
          cp task-definition.json task-definition.json.backup
        fi
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: mclass-server
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Register task definition
      run: aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }} --region ${{ env.AWS_REGION }}
    
    - name: Check if ECS service exists
      id: check-service
      run: |
        echo "🔍 ECS 서비스 확인 중..."
        echo "클러스터: ${{ env.ECS_CLUSTER }}"
        echo "서비스: ${{ env.ECS_SERVICE }}"
        echo "리전: ${{ env.AWS_REGION }}"
        
        # AWS CLI 명령어 실행 결과 확인
        echo "=== AWS CLI 명령어 실행 ==="
        aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} || echo "AWS CLI 명령어 실패"
        
        # 더 정확한 확인 방법
        SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null || echo "NONE")
        echo "서비스 상태: $SERVICE_STATUS"
        
        # 서비스 설정 확인 (desired count 등)
        echo "📊 서비스 설정 확인:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount,pendingCount:pendingCount,deploymentConfiguration:deploymentConfiguration}' \
          --output table
        
        # 배포 상태도 확인
        echo "📊 현재 배포 상태:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].deployments[].{id:id,status:status,failedTasks:failedTasks,runningCount:runningCount,desiredCount:desiredCount}' \
          --output table
        
        if [ "$SERVICE_STATUS" = "ACTIVE" ] || [ "$SERVICE_STATUS" = "DRAINING" ]; then
          echo "✅ ECS 서비스가 존재합니다: $SERVICE_STATUS"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ECS 서비스가 존재하지 않습니다: $SERVICE_STATUS"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Update existing ECS service
      if: steps.check-service.outputs.exists == 'true'
      run: |
        echo "🧹 실패한 배포 정리 중..."
        
        # 현재 서비스의 모든 배포 상태 확인
        DEPLOYMENTS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].deployments[?failedTasks>`0`].id' \
          --output text)
        
        if [ ! -z "$DEPLOYMENTS" ]; then
          echo "❌ 실패한 배포 발견: $DEPLOYMENTS"
          echo "🔧 실패한 배포 정리 중..."
          
          # 실패한 배포가 있는 경우 서비스 업데이트로 정리
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --region ${{ env.AWS_REGION }} \
            --force-new-deployment
          
          echo "⏳ 실패한 배포 정리 대기 중..."
          sleep 30
        else
          echo "✅ 실패한 배포 없음"
        fi
        
        # Unknown 상태의 태스크들 확인 및 정리
        echo "🔍 Unknown 상태 태스크 확인 중..."
        UNKNOWN_TASKS=$(aws ecs list-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'taskArns' \
          --output text)
        
        if [ ! -z "$UNKNOWN_TASKS" ]; then
          echo "⚠️  Unknown 상태 태스크 발견: $UNKNOWN_TASKS"
          echo "🔧 태스크 상태 확인:"
          aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $UNKNOWN_TASKS \
            --region ${{ env.AWS_REGION }} \
            --query 'tasks[].{taskArn:taskArn,lastStatus:lastStatus,desiredStatus:desiredStatus,healthStatus:healthStatus}' \
            --output table
          
          echo "🛑 Unknown 태스크들 강제 중지 중..."
          aws ecs stop-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task $UNKNOWN_TASKS \
            --region ${{ env.AWS_REGION }} \
            --reason "강제 정리: Unknown 상태 태스크" || echo "일부 태스크 중지 실패 (이미 중지됨)"
          
          echo "⏳ 태스크 정리 대기 중..."
          sleep 60
        else
          echo "✅ Unknown 상태 태스크 없음"
        fi
        
        echo "🚀 새로운 배포 시작..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --region ${{ env.AWS_REGION }}
        
        # 서비스 desired count 확인 및 수정
        echo "🔍 서비스 desired count 확인 중..."
        CURRENT_DESIRED_COUNT=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].desiredCount' \
          --output text)
        
        echo "현재 desired count: $CURRENT_DESIRED_COUNT"
        
        if [ "$CURRENT_DESIRED_COUNT" = "0" ]; then
          echo "⚠️  서비스가 중지 상태입니다! desired count를 2로 설정 중..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 2 \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ desired count를 2로 설정했습니다"
        else
          echo "✅ desired count가 올바르게 설정되어 있습니다: $CURRENT_DESIRED_COUNT"
        fi
        
        # 만약 여전히 문제가 있다면 서비스를 일시적으로 중지했다가 재시작
        echo "🔍 배포 후 상태 확인 중..."
        sleep 30
        
        CURRENT_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].status' \
          --output text)
        
        if [ "$CURRENT_STATUS" != "ACTIVE" ]; then
          echo "⚠️  서비스가 안정적이지 않음. 강제 재시작 시도..."
          
          # 서비스 desired count를 0으로 설정
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0 \
            --region ${{ env.AWS_REGION }}
          
          echo "⏳ 모든 태스크 종료 대기 중..."
          sleep 120
          
          # 서비스 desired count를 다시 2로 설정
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 2 \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ 서비스 재시작 완료"
        fi
    
    - name: Verify ECS service exists
      if: steps.check-service.outputs.exists == 'false'
      run: |
        echo "❌ ECS 서비스가 존재하지 않습니다."
        echo "📝 Terraform을 먼저 실행하여 인프라를 생성하세요:"
        echo "   GitHub Actions → Terraform CI 워크플로우 실행"
        echo ""
        echo "서비스 이름: ${{ env.ECS_SERVICE }}"
        echo "클러스터: ${{ env.ECS_CLUSTER }}"
        echo "Task Definition: ${{ env.ECS_TASK_DEFINITION }}"
        echo ""
        echo "💡 해결 방법:"
        echo "1. GitHub Actions에서 'Terraform CI' 워크플로우 실행"
        echo "2. main 브랜치에 머지 후 자동 실행"
        echo "3. Terraform으로 모든 인프라 생성 후 재시도"
        exit 1

    - name: Wait for service stability
      run: |
        echo "🔍 서비스 안정화 대기 시작..."
        echo "클러스터: ${{ env.ECS_CLUSTER }}"
        echo "서비스: ${{ env.ECS_SERVICE }}"
        echo "리전: ${{ env.AWS_REGION }}"
        echo ""
        
        # 현재 서비스 상태 확인
        echo "📊 현재 서비스 상태:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount,pendingCount:pendingCount,deployments:deployments}' \
          --output table
        
        echo ""
        echo "⏳ 서비스 안정화 대기 중... (최대 20분)"
        
        # 더 긴 타임아웃과 함께 안정화 대기
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 1200 || {
            echo "❌ 서비스 안정화 대기 실패!"
            echo ""
            echo "🔍 문제 진단을 위한 추가 정보:"
            echo "1. 서비스 상태:"
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount,pendingCount:pendingCount}' \
              --output table
            
            echo ""
            echo "2. 최근 이벤트:"
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].events[0:10].{createdAt:createdAt,message:message}' \
              --output table
            
            echo ""
            echo "3. 태스크 상태 확인:"
            TASK_ARNS=$(aws ecs list-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'taskArns' \
              --output text)
            
            if [ ! -z "$TASK_ARNS" ]; then
              echo "📋 태스크 상세 정보:"
              aws ecs describe-tasks \
                --cluster ${{ env.ECS_CLUSTER }} \
                --tasks $TASK_ARNS \
                --region ${{ env.AWS_REGION }} \
                --query 'tasks[].{taskArn:taskArn,lastStatus:lastStatus,desiredStatus:desiredStatus,healthStatus:healthStatus,stoppedReason:stoppedReason}' \
                --output table
              
              echo ""
              echo "📋 컨테이너 상태:"
              aws ecs describe-tasks \
                --cluster ${{ env.ECS_CLUSTER }} \
                --tasks $TASK_ARNS \
                --region ${{ env.AWS_REGION }} \
                --query 'tasks[].containers[].{name:name,lastStatus:lastStatus,healthStatus:healthStatus,exitCode:exitCode,reason:reason}' \
                --output table
            fi
            
            echo ""
            echo "4. 로드밸런서 상태:"
            SERVICE_ARN=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].loadBalancers[0].targetGroupArn' \
              --output text)
            
            if [ "$SERVICE_ARN" != "None" ] && [ ! -z "$SERVICE_ARN" ]; then
              echo "🎯 타겟 그룹 상태:"
              aws elbv2 describe-target-health \
                --target-group-arn $SERVICE_ARN \
                --region ${{ env.AWS_REGION }} \
                --query 'TargetHealthDescriptions[].{Target:Target.Id,Port:Target.Port,Health:TargetHealth.State,Description:TargetHealth.Description}' \
                --output table
            fi
            
            echo ""
            echo "💡 가능한 원인:"
            echo "- 태스크가 시작되지 않음 (이미지 문제, 리소스 부족)"
            echo "- 헬스체크 실패 (애플리케이션 시작 실패)"
            echo "- 네트워크 설정 문제"
            echo "- 보안 그룹 설정 문제"
            echo "- 로드밸런서 타겟 그룹 등록 실패"
            
            exit 1
          }
        
        echo "✅ 서비스 안정화 완료!"
        
        # 최종 상태 확인
        echo ""
        echo "🎉 배포 완료! 최종 상태:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount,pendingCount:pendingCount}' \
          --output table

    - name: Deployment Status
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📦 Image: ${{ steps.build-image.outputs.image }}"
        echo "🔗 ECS Service: ${{ env.ECS_SERVICE }}"
        echo "🏗️  Cluster: ${{ env.ECS_CLUSTER }}"
        echo "⏰ Deployment Time: $(date)"

    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi 